plugins {
    id 'java-gradle-plugin' 
    id 'com.gradle.plugin-publish' version '0.10.0' 
}

buildDir new File(rootDir.toString()+"/plugin/plugin-build")

description "脚本蜘蛛插件工程"
group "king.shellspider"                                       

pluginUnderTestMetadata.enabled false
test.enabled false
javadoc.enabled false

sourceSets {
  main {
    java {
       srcDirs = ['source-code']
    }
    resources {
       srcDirs = ['source-res']
    }
  }
}

pluginBundle {
    website = 'https://github.com/King-1025/SelfGradlePlugin'
    vcsUrl = 'https://github.com/King-1025/SelfGradlePlugin.git'
    tags = ['shell', 'template','spider']
}

gradlePlugin {
    plugins {
        shellSpider {
            id = 'king.shellspider'
            displayName = '脚本蜘蛛'
            description = '一个生成脚本蜘蛛的插件'
            implementationClass = 'king.plugin.ShellSpiderPlugin'
        }
    }
}
/*
project.ext.show={                      
    tag,message->System.out.println(tag+" ---> "+message)
}
def show(String tag,String message){
    project.ext.show(tag,message)
}
tasks.create("showProjectProperty",{
 Project[] projects=project.allprojects.toArray()
 for(int i=0;i<projects.size();i++)
    show(i+"-project:",projects[i])
 
 Project pro=projects[0]

 File dir=pro.buildDir;
 if(dir.exists()){
   show("buildDir:",dir.getAbsolutePath())
 }else{
   dir.mkdirs()
 }

 File file=pro.buildFile;
 if(file.exists()&&file.isFile()){
    show("buildFile:",file.toURI())
 }else{
    show("buildFile:","不存在或者不是文件")
 }

 ScriptHandler shd=pro.buildscript
 show("buildscript.sourceURI:",shd.getSourceURI())
 
 Convention ct=pro.convention
 Map<String,Object> plugins=ct.getPlugins()
 Set<String> sst=plugins.keySet()
 for(String key in sst){
    show(key+":",plugins.get(key).getClass().getName())
 }
  
 pro.defaultTasks.add("fun0")
 pro.defaultTasks.add("fun1")
 List<String> deftasks=pro.defaultTasks
 for(String name in deftasks){
    show("defaultTask:",name)
 }

 show("description:",pro.description)

 show("gradle.version:",pro.gradle.gradleVersion)

 show("name:",pro.name)

 show("current log level:",pro.logging.getLevel()) 
})

project.ext.fun0={
 show("fun0","I am called.")
}

project.ext.fun1={
 show("fun1","I am called.")
}

tasks.create("fun0",fun0)
project.getTasks().create("fun1",fun1) i
*/
